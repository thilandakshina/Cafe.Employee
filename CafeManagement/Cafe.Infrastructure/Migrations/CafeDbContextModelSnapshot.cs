// <auto-generated />
using System;
using Cafe.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cafe.Infrastructure.Migrations
{
    [DbContext(typeof(CafeDbContext))]
    partial class CafeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Cafe.Domain.Entities.CafeEmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CafeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CafeId");

                    b.HasIndex("EmployeeId", "IsActive")
                        .IsUnique()
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("CafeEmployees");
                });

            modelBuilder.Entity("Cafe.Domain.Entities.CafeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cafes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8f1c92a-1234-4e6d-915f-223344d4f73a"),
                            CreatedDate = new DateTime(2024, 11, 14, 15, 20, 25, 176, DateTimeKind.Utc).AddTicks(3963),
                            Description = "A cozy place with great coffee and pastries.",
                            IsActive = true,
                            Location = "123 Maple Street, Springfield",
                            Logo = "",
                            Name = "Sunny Cafe"
                        },
                        new
                        {
                            Id = new Guid("a8f3c92a-2345-4e6d-915f-223344d4f74b"),
                            CreatedDate = new DateTime(2024, 11, 14, 15, 20, 25, 176, DateTimeKind.Utc).AddTicks(3967),
                            Description = "Modern cafe serving organic coffee and teas.",
                            IsActive = true,
                            Location = "456 Oak Avenue, Riverdale",
                            Logo = "",
                            Name = "City Brew"
                        },
                        new
                        {
                            Id = new Guid("d9e4c92a-3456-4e6d-915f-223344d4f75c"),
                            CreatedDate = new DateTime(2024, 11, 14, 15, 20, 25, 176, DateTimeKind.Utc).AddTicks(4027),
                            Description = "Vegan-friendly cafe with a range of smoothies.",
                            IsActive = true,
                            Location = "789 Pine Road, Sunnyvale",
                            Logo = "",
                            Name = "Green Leaf Cafe"
                        });
                });

            modelBuilder.Entity("Cafe.Domain.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-1234-56789abcdef0"),
                            CreatedDate = new DateTime(2024, 11, 14, 15, 20, 25, 176, DateTimeKind.Utc).AddTicks(4034),
                            EmailAddress = "john.doe@gmail.com",
                            EmployeeId = "UI0000001",
                            Gender = 0,
                            IsActive = true,
                            Name = "John Doe",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-8901-2345-67890abcdef1"),
                            CreatedDate = new DateTime(2024, 11, 14, 15, 20, 25, 176, DateTimeKind.Utc).AddTicks(4038),
                            EmailAddress = "jane.smith@gmail.com",
                            EmployeeId = "UI0000002",
                            Gender = 1,
                            IsActive = true,
                            Name = "Ja Smith",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-9012-3456-7890abcdef12"),
                            CreatedDate = new DateTime(2024, 11, 14, 15, 20, 25, 176, DateTimeKind.Utc).AddTicks(4040),
                            EmailAddress = "alex.johnson@gmail.com",
                            EmployeeId = "UI0000003",
                            Gender = 0,
                            IsActive = true,
                            Name = "Alex",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a7-b8c9-0123-4567-890abcdef123"),
                            CreatedDate = new DateTime(2024, 11, 14, 15, 20, 25, 176, DateTimeKind.Utc).AddTicks(4042),
                            EmailAddress = "emily.davis@gmail.com",
                            EmployeeId = "UI0000004",
                            Gender = 1,
                            IsActive = true,
                            Name = "Emily",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            Id = new Guid("e5f6a7b8-c9d0-1234-5678-90abcdef1234"),
                            CreatedDate = new DateTime(2024, 11, 14, 15, 20, 25, 176, DateTimeKind.Utc).AddTicks(4044),
                            EmailAddress = "daniel.brown@gmail.com",
                            EmployeeId = "UI0000005",
                            Gender = 0,
                            IsActive = true,
                            Name = "Daniel",
                            PhoneNumber = "567-890-1234"
                        });
                });

            modelBuilder.Entity("Cafe.Domain.Entities.CafeEmployeeEntity", b =>
                {
                    b.HasOne("Cafe.Domain.Entities.CafeEntity", "CafeEntity")
                        .WithMany("CafeEmployees")
                        .HasForeignKey("CafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Domain.Entities.EmployeeEntity", "EmployeeEntity")
                        .WithMany("CafeEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CafeEntity");

                    b.Navigation("EmployeeEntity");
                });

            modelBuilder.Entity("Cafe.Domain.Entities.CafeEntity", b =>
                {
                    b.Navigation("CafeEmployees");
                });

            modelBuilder.Entity("Cafe.Domain.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("CafeEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
